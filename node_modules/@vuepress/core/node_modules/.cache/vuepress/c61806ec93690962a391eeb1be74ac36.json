{"remainingRequest":"/home/maicon/Vacation/project-ceruttimaicon.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/maicon/Vacation/project-ceruttimaicon.github.io/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/maicon/Vacation/project-ceruttimaicon.github.io/node_modules/vue-loader/lib/index.js??ref--1-1!/home/maicon/Vacation/project-ceruttimaicon.github.io/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/home/maicon/Vacation/project-ceruttimaicon.github.io/docs/docker-laradock/README.md?vue&type=template&id=637c43ce&","dependencies":[{"path":"/home/maicon/Vacation/project-ceruttimaicon.github.io/docs/docker-laradock/README.md","mtime":1602732321557},{"path":"/home/maicon/Vacation/project-ceruttimaicon.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1602733346429},{"path":"/home/maicon/Vacation/project-ceruttimaicon.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1602733347176},{"path":"/home/maicon/Vacation/project-ceruttimaicon.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1602733346429},{"path":"/home/maicon/Vacation/project-ceruttimaicon.github.io/node_modules/vue-loader/lib/index.js","mtime":1602733347176},{"path":"/home/maicon/Vacation/project-ceruttimaicon.github.io/node_modules/@vuepress/markdown-loader/index.js","mtime":1602733345276}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}