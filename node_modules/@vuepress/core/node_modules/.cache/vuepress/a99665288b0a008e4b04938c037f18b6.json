{"remainingRequest":"/home/face-digital/Vacationspace/vue/project-ceruttimaicon.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/face-digital/Vacationspace/vue/project-ceruttimaicon.github.io/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/face-digital/Vacationspace/vue/project-ceruttimaicon.github.io/node_modules/vue-loader/lib/index.js??ref--1-1!/home/face-digital/Vacationspace/vue/project-ceruttimaicon.github.io/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/home/face-digital/Vacationspace/vue/project-ceruttimaicon.github.io/docs/linux-ubuntu-tema-mac/README.md?vue&type=template&id=11185984&","dependencies":[{"path":"/home/face-digital/Vacationspace/vue/project-ceruttimaicon.github.io/docs/linux-ubuntu-tema-mac/README.md","mtime":1587331076199},{"path":"/home/face-digital/Vacationspace/vue/project-ceruttimaicon.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1587331147391},{"path":"/home/face-digital/Vacationspace/vue/project-ceruttimaicon.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1576822908150},{"path":"/home/face-digital/Vacationspace/vue/project-ceruttimaicon.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1587331147391},{"path":"/home/face-digital/Vacationspace/vue/project-ceruttimaicon.github.io/node_modules/vue-loader/lib/index.js","mtime":1576822908150},{"path":"/home/face-digital/Vacationspace/vue/project-ceruttimaicon.github.io/node_modules/@vuepress/markdown-loader/index.js","mtime":1587331147252}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}